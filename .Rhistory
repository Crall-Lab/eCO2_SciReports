plotweb(PollNetwork,labsize=.5)
dev.off()
source('~/.active-rstudio-document')
helloworld<-c(1,2,3) ## assigning object name
avghelloworld<-mean(helloworld)
getwd()
setwd(/Users/OliviaBernauer)
setwd(Users/OliviaBernauer)
getwd()
setwd(C:/Users/OliviaBernauer)
setwd(/Users/OliviaBernauer)
setwd(Users/OliviaBernauer)
getwd()
setwd("Users/OliviaBernauer")
source('~/Documents/Research/R/Starting Script OB_2019.R')
source('~/Documents/Research/R/Starting Script OB_2019.R')
citation()
citation(MASS)
citation("MASS")
###########
## bees vs. everything else
bees <- LP %>% filter(Specimen.type == "Loose Pollen")
library("ggpubr")
library("dplyr")
library("ggplot2")
library("car")
library("FSA")
library("agricolae")
library("multcomp")
library("DescTools")
library("lsmeans")
library("multcompView")
library("Rmisc")
library("pwr")
library("onewaytests")
library("pscl")
library("MASS")
library("boot")
library("tidyverse")
library("rstatix")
library("broom")
library("datarium")
library("reshape")
library("rcompanion")
library("foreign")
library("MASS")
library("reshape2")
library("stargazer")
library("summarytools")
## read in all of the data frames you need
SV<-read.csv(file="2018-Single-Visits-11-10-2020.csv",header=T, na.strings = c("","NULL"))
ss<-read.csv(file="2018-SingleVisit-SeedSet-11-10-2020.csv", header = T, na.strings = c("","NULL"))
P<-read.csv(file="2019-PollenDeposition-2020-11-27.csv", header = T, na.strings = c("","NULL"))
p<-read.csv(file="2019-PD.csv", header = T, na.strings=c("","NULL"))
LF<-read.csv(file="2018-Collected-Specimens-OMB-12-08-2020.csv", na.strings=c("","NULL"))
L <- read.csv(file="2020-12-08-LoosePollen.csv", na.strings=c("","NULL"))
mshort<-read.csv(file="shortened-model.csv", na.strings=c("","NULL"))
pd<- read.csv(file="PD.csv", header = T, na.strings = c("","NULL"))
a <- read.csv(file = "averages-by-year-region.csv", header=T, na.strings = c("","NULL"))
prop <- read.csv(file = "PL_prop_pollen.csv", header = T, na.string = c("","NULL"))
f<- read.csv(file = "pollensummarypresentabsent.csv", header = T, na.string = c("","NULL"))
C <- read.csv(file = "LD.csv", header = T, na.string = c("","NULL"))
## Clean up SV
SV$l.FS <- log(SV$Fruit.set+1)
SV$sr.FS <- sqrt(SV$Fruit.set)
## remove data from young
SV <- SV[SV$Region != "Young",]
B <- SV %>% filter (Region == "Bilpin")
## Make early and peak data frames
SV.early<-SV[SV$Bloom.status..Early.Peak. == "Early",]
SV.peak<-SV[SV$Bloom.status..Early.Peak. == "Peak",]
##########
## SV Early
######
SV.early.B<-SV.early[SV.early$Region == "Bilpin",]
## remove single visits from multiple visitors or no visitors
SV.early.B<-SV.early.B[SV.early.B$Visitor != "multiple",]
## Test for normality in fruit set column before comparing within treatments
ggdensity(SV.early.B$Fruit.set,
main="Density plot of Fruit set",
xlab="Fruit set")
ggqqplot(SV.early.B$Fruit.set)
## Shapiro wilk test for normality
shapiro.test(SV.early.B$Fruit.set)
## variance
leveneTest(Fruit.set ~ Treatment, SV.early.B, center=mean)
## filter out things with fewer than 5 observations like we did with everything else
LP <- LF %>% filter (Specimen.type == "Loose Pollen")
LP <- LP %>% filter (Region != "Young")
LP <- LP %>% filter (Host.plant == "Pink Lady")
citation("FD")
citation(lme4)
citation("lme4")
citation()
library(devtools)
install_github('andreacirilloac/updateR')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## This is a title!
Text outside of cells is for commenting and describing
Hashtags can be used for basic formatting, e.g.,
```{r load libraries}
library(lubridate)
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/logger.csv'
temp_data <- read.csv(filename)
colnames(temp_data) <- c('time', 'pressure', 'temp', 'humidity')
head(temp_data)
start.date <- parse_date_time('2022-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
?difftime
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
plot(temp~datenum, data = temp_data, pch = 19, col = "blue", xlab = "Time (days since Jan 1 2022)", ylab = "Temperature (C)")
start.date <- parse_date_time('2023-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
plot(temp~datenum, data = temp_data, pch = 19, col = "blue", xlab = "Time (days since Jan 1 2022)", ylab = "Temperature (C)")
# Generate overall boxplots
boxplot(temp_data$temp)
boxplot(temp_data$pressure)
boxplot(temp_data$humidity)
boxplot(temp_data$pressure)
boxplot(temp_data$humidity)
temp_data$early <- temp_data$datenum < 315
start.date <- parse_date_time('2022-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$early <- temp_data$datenum < 315
start.date <- parse_date_time('2023-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$early <- temp_data$datenum < 28
boxplot(temp~early, data = temp_data)
#Plot two variables against each other
plot(humidity~temp, data = temp_data)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/logger.csv'
# Creates a variables 'filename' with the full path of your .csv file from the data logger
#
# NB This filename will be specific to your computer and will need to be modified.
# On mac, a shortcut to finding full pathnames is to control click (or right click),
# and then press 'option', and click 'Copy 'your file' as Pathname'
#
# On Windows, you can do the same by pressing the Shift Key and right-clicking, then 'Copy as Path'
temp_data <- read.csv(filename)
#Reads csv from file directly into a data frame
colnames(temp_data) <- c('time', 'pressure', 'temp', 'humidity')
# Manually add column names
head(temp_data)
#Very useful function that shows you the first 6 lines of a data frame, with variable names, etc. Especially useful for making sure things
start.date <- parse_date_time('2023-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
#Create a reference time point to calculate differences relative to. In this case, our reference time point will be Jan 1, 2022.
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
#This function is actually three steps combined:
#1: the inner function (parse_date_time function from the lubridate package) takes the timestamp from the logger
#2: difftime - whatever this does - calculates time differences
#3: tells R this is a numeric column
plot(temp~datenum, data = temp_data, pch = 19, col = "blue", xlab = "Time (days since Jan 1 2022)", ylab = "Temperature (C)")
# Things to look for in this kind of plot:
# Are the data on approximately the right scale? I.e., if you're measuring temperature in celsius and the data here maximum values in the 1000s, it's time to investigate!
#Stretch exercise: add lines here to make a similar plot for pressure and humidity
# Generate overall boxplots
boxplot(temp_data$temp)
#Generates a boxplot for a single variables
boxplot(temp_data$pressure)
boxplot(temp_data$humidity)
temp_data$early <- temp_data$datenum < 28
# Create a logical (True/False) variable in the data frame for whether or not the time is before a specific date
boxplot(temp~early, data = temp_data)
#This is an alternative way of specifying plotting; 'y~x' denotes plotting y as a function of x. For box plots, if the x variable is categorical or logical (as here), it will generate separate boxplots for each value of the x variable. The formula based plotting can be used with data frames, which have to be specified (here using the 'data=temp_data' input)
#Plot two variables against each other
plot(humidity~temp, data = temp_data)
install.package("lubridate")
install.packages("lubridate")
library("lubridate")
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/lightlogger1.csv'
light_data <- read.csv(filename)
colnames(light_data) <- c('time', 'light_ir', 'ir')
head(light_data)
start.date <- parse_date_time('2023-02-01 00:00:00', "%Y-%m-%d %H:%M:%S")
light_data$datenum <- as.numeric(difftime(parse_date_time(light_data$time, 'ymd-HMS'),start.date))
plot(light_ir~datenum, data = light_data, pch = 19, col = "purple", xlab = "Time (days since Feb 1 2023)", ylab = "Light and IR Intensity")
plot(ir~datenum, data = light_data, pch = 19, col = "green", xlab = "Time (days since Feb 1 2023)", ylab = "IR Intensity")
# remove IR from light+ir column
light_data$light<- light_data$light_ir - light_data$ir
plot(light~datenum, data = light_data, pch = 19, col = "magenta", xlab = "Time (days since Feb 1 2023)", ylab = "Light Intensity")
# remove IR from light+ir column
light_data$light<- light_data$ir - light_data$light_ir
plot(light~datenum, data = light_data, pch = 19, col = "magenta", xlab = "Time (days since Feb 1 2023)", ylab = "Light Intensity")
# Generate overall boxplots
boxplot(light_data$light_ir)
boxplot(light_data$ir)
boxplot(light_data$light)
temp_data$early <- temp_data$datenum < 7
light_data$early <- temp_data$datenum < 7
light_data$early <- light_data$datenum < 7
boxplot(ir~early, data = light_data)
#Plot light and IR against each other
plot(light~ir, data = light_data)
boxplot(light_ir~high, data = light_data)
light_data$high <- light_data$light_ir <700
boxplot(light_ir~high, data = light_data)
source("~/.active-rstudio-document", echo=TRUE)
View(light_data)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
light_data <- read.csv(filename)
colnames(light_data) <- c('time', 'light_ir', 'ir')
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/lightlogger1.csv'
light_data <- read.csv(filename)
colnames(light_data) <- c('time', 'light_ir', 'ir')
head(light_data)
start.date <- parse_date_time('2023-02-01 00:00:00', "%Y-%m-%d %H:%M:%S")
light_data$datenum <- as.numeric(difftime(parse_date_time(light_data$time, 'ymd-HMS'),start.date))
View(light_data)
plot(light_ir~datenum, data = light_data, pch = 19, col = "green", xlab = "Time (days since Feb 1 2023)", ylab = "Light Intensity")
plot(ir~datenum, data = light_data, pch = 19, col = "darkred", xlab = "Time (days since Feb 1 2023)", ylab = "IR Intensity")
# Generate overall boxplots
boxplot(light_data$ir)
boxplot(light_data$light_ir)
boxplot(light_data$light_ir)
light_data$early <- light_data$datenum < 7
View(light_data)
boxplot(light_ir~early, data = light_data)
# Generate overall boxplots
boxplot(light_data$ir)
#Generates a boxplot for a single variables
boxplot(light_data$light_ir)
light_data$early <- light_data$datenum < 7
# Create a logical (True/False) variable in the data frame for whether or not the time is before a specific date
boxplot(light_ir~early, data = light_data)
#This is an alternative way of specifying plotting; 'y~x' denotes plotting y as a function of x. For box plots, if the x variable is categorical or logical (as here), it will generate separate boxplots for each value of the x variable. The formula based plotting can be used with data frames, which have to be specified (here using the 'data=temp_data' input)
#Plot two variables against each other
plot(light_ir~ir, data = light_data)
setwd("/Users/OliviaBernauer/Documents/Research/oliviabernauer/eCO2_SciReports")
##############################
## read in the data frames
W.pollen<-read.csv(file = "Pollen_chemistry_exp2.csv", header = T, na.strings = c("", "NULLL"))
H.pollen <- read.csv(file = "Pollen_chemistry_exp1.csv", header = T, na.string = c("", "NULL"))
# clean data frames
# Pollen nutrition exp 1
H.pollen <- H.pollen %>% filter(is.na(Omit))
library("tidyverse")
e
e
e
# clean data frames
# Pollen nutrition exp 1
H.pollen <- H.pollen %>% filter(is.na(Omit))
H.pollen$CO2 <- as.factor(H.pollen$CO2)
H.pollen$Round <- as.factor(H.pollen$Round)
H.pollen$Plant <- as.factor(H.pollen$Plant)
# Pollen nutrition exp 2
W.pollen$Plant_SP <- factor(W.pollen$Plant_SP, levels = c("B", "BW", "C", "D", "LP", "N", "PP", "SA", "SF"))
W.pollen$Chamber <- factor(W.pollen$Chamber, levels = c("60", "63", "62", "61"))
# omit samples that were too low and duplicates
W.pollen <- W.pollen %>% filter(is.na(OMIT))
# add C:N ratio column
W.pollen$ratio <- W.pollen$C/W.pollen$N
############################
# summarize and plot data
W.po.short <- W.pollen %>% filter(Plant_SP != "PP")
# remove plants, rounds, and chambers w/fewer than 3 samples
W.po.short <- W.po.short %>% group_by(Plant_SP, Chamber, Round) %>% filter(n()>2) %>% ungroup()
# plot w/just CO2 treatments
po.sum <- W.po.short %>% group_by(Plant_SP, CO2) %>%
dplyr::summarise(
count = n(),
mean = mean(log(N), na.rm = T),
sd = sd(log(N), na.rm = T)
)
po.sum$se <- po.sum$sd/sqrt(po.sum$count)
po.sum$CO2 <-factor(po.sum$CO2, levels = c(0, 1))
po.sum$chemistry <- "N"
po.sum1 <- W.po.short %>% group_by(Plant_SP, CO2) %>%
dplyr::summarise(
count = n(),
mean = mean(log(C), na.rm = T),
sd = sd(log(C), na.rm = T)
)
po.sum1$se <- po.sum1$sd/sqrt(po.sum1$count)
po.sum1$CO2 <-factor(po.sum1$CO2, levels = c(0, 1))
po.sum1$chemistry <- "C"
# log transfer to bring buckwheat back with everyone else
W.po.short$log_ratio <- log(W.po.short$ratio)
po.sum2 <- W.po.short %>% group_by(Plant_SP, CO2) %>%
dplyr::summarise(
count = n(),
mean = mean(ratio, na.rm = T),
sd = sd(ratio, na.rm = T)
)
po.sum2$se <- po.sum2$sd/sqrt(po.sum2$count)
po.sum2$CO2 <-factor(po.sum2$CO2, levels = c(0, 1))
po.sum2$chemistry <- "log(C:N)"
# put them all together
WI.pc <- rbind(po.sum, po.sum1, po.sum2)
WI.pc$chemistry <- factor(WI.pc$chemistry, levels = c("N", "C", "log(C:N)"))
# plot it
plants <- c("Borage", "Buckwheat","Red Clover", "Lacy Phacelia", "Nasturtium", "Sweet Alyssum", "Sunflower")
names(plants) <- c("B", "BW", "C", "LP", "N", "SA", "SF")
ggplot(WI.pc, aes(x=Plant_SP, y = mean, color = CO2))+
geom_point(position = position_dodge(w = 0.75), size = 2)+
geom_errorbar(aes(ymin=mean-se, ymax = mean+se), position = position_dodge(w = 0.75), width=0.2)+
theme_classic()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90))+
labs(y="Pollen chemistry ± se")+
scale_color_manual(values = c("grey","navyblue"),
labels = c("aCO2", "eCO2"),
name = "Treatment")+
scale_x_discrete(labels = plants)+
facet_wrap(vars(chemistry),
ncol = 1,
scales = "free")
############################
# summarize and plot data
# remove partridge pea, too few samples
W.po.short <- W.pollen %>% filter(Plant_SP != "PP")
# remove plants, rounds, and chambers w/fewer than 3 samples
W.po.short <- W.po.short %>% group_by(Plant_SP, Chamber, Round) %>% filter(n()>2) %>% ungroup()
############################
# summarize and plot data
# remove partridge pea, too few samples
W.po.short1 <- W.pollen %>% filter(Plant_SP != "PP")
# plot it
plants.2 <- c("Borage", "Buckwheat","Red Clover", "Lacy Phacelia", "Nasturtium", "Sweet Alyssum", "Sunflower")
names(plants.2) <- c("B", "BW", "C", "LP", "N", "SA", "SF")
W.po.short$CO2 <- as.factor(W.po.short$CO2)
N<-ggplot(W.po.short, aes(x= Plant_SP, y = log(N), fill = CO2))+
geom_violin()+
geom_point(position=position_jitterdodge(), size = 0.5, alpha = 0.3, aes(color=CO2))+
theme_classic()+
scale_fill_manual(values = c("grey", "cornflowerblue"),
labels = c("aCO2", "eCO2"),
name = "CO2 Treatment")+
scale_color_manual(values = c("black", "navy"),
labels = c("aCO2", "eCO2"),
name = "CO2 Treatment")+
scale_x_discrete(labels = plants.2)+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
axis.title.x=element_blank())+
stat_summary(fun = "mean",
fun.args = list(mult = 1),
geom="crossbar",
color = "black",
width=.75,
position=position_dodge(0.9))
C<- ggplot(W.po.short, aes(x= Plant_SP, y = C, fill = CO2))+
geom_violin()+
geom_point(position=position_jitterdodge(), size = 0.5, alpha = 0.5, aes(color=CO2))+
theme_classic()+
scale_fill_manual(values = c("grey", "cornflowerblue"),
labels = c("aCO2", "eCO2"),
name = "CO2 Treatment")+
scale_color_manual(values = c("black", "navy"),
labels = c("aCO2", "eCO2"),
name = "CO2 Treatment")+
scale_x_discrete(labels = plants.2)+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
axis.title.x=element_blank())+
stat_summary(fun = "mean",
fun.args = list(mult = 1),
geom="crossbar",
color = "black",
width=.75,
position=position_dodge(0.9))
CN<-ggplot(W.po.short, aes(x= Plant_SP, y = log(ratio), fill = CO2))+
geom_violin()+
geom_point(position=position_jitterdodge(), size = 0.5, alpha = 0.5, aes(color=CO2))+
theme_classic()+
scale_fill_manual(values = c("grey", "cornflowerblue"),
labels = c("aCO2", "eCO2"),
name = "CO2 Treatment")+
scale_color_manual(values = c("black", "navy"),
labels = c("aCO2", "eCO2"),
name = "CO2 Treatment")+
scale_x_discrete(labels = plants.2)+
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, hjust=1, size = .2),
axis.title.x=element_blank())+
stat_summary(fun = "mean",
fun.args = list(mult = 1),
geom="crossbar",
color = "black",
width=.75,
position=position_dodge(0.9))
# add all to one plot
ggarrange(N, C, CN, nrow=3, ncol = 1)
library("ggpubr")
# add all to one plot
ggarrange(N, C, CN, nrow=3, ncol = 1)
### analysis
# N model
# full model
W.po.short1 <- W.po.short %>% filter(!is.na(N))
m <- lmer(N ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
library("lme4")
### analysis
# N model
# full model
W.po.short1 <- W.po.short %>% filter(!is.na(N))
m <- lmer(N ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel = m, plot = F))
library("DHARMa")
plot(simulationOutput <- simulateResiduals(fittedModel = m, plot = F))
plotResiduals(simulationOutput, form = W.po.short$Plant_SP)
testDispersion(simulationOutput, alternative = "less")
summary(simulationOutput)
summary(m)
anova(m)
summary(m)
anova(m)
# test w/formula James suggested
m.1 <-lmer(N ~ CO2*Plant_SP + Round + (1|Chamber),  data = W.po.short, REML=F)
summary(m.1)
anova(m.1) # Plant SP and Round significant
### analysis
# N model
# full model
W.po.short1 <- W.po.short %>% filter(!is.na(N))
m <- lmer(N ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel = m, plot = F))
plotResiduals(simulationOutput, form = W.po.short$Plant_SP)
testDispersion(simulationOutput, alternative = "less")
summary(simulationOutput)
summary(m)
anova(m)
## C:N ratio
m <- lmer(ratio ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
testDispersion(m)
simulationOutput <- simulateResiduals(fittedModel = m, plot = F)
residuals(simulationOutput, quantileFunction = qnorm, outlierValues = c(-7,7))
plot(simulationOutput)
plotResiduals(simulationOutput, form = W.po.short$Plant_SP)
### analysis
# N model
# full model
W.po.short1 <- W.po.short %>% filter(!is.na(N))
m <- lmer(N ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel = m, plot = F))
summary(simulationOutput)
summary(m)
summary(m)
anova(m) # no significance
## C:N ratio
m <- lmer(ratio ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
simulationOutput <- simulateResiduals(fittedModel = m, plot = F)
summary(m)
anova(m) # only plant species significant
summary(m)
library("lmerTest")
### analysis
# N model
# full model
W.po.short1 <- W.po.short %>% filter(!is.na(N))
m <- lmer(N ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel = m, plot = F))
summary(m)
anova(m) # no significance
## C:N ratio
m <- lmer(ratio ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
simulationOutput <- simulateResiduals(fittedModel = m, plot = F)
summary(m)
anova(m) # only plant species significant
####
# %C
m <- lmer(C ~ CO2*Round*Plant_SP + (1|Chamber), data = W.po.short, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel = m, plot = F))
summary(m)
anova(m) # significant effect of Round and Plant species
# formula james suggested
m2 <- lmer(C ~ CO2*Plant_SP + Round + (1|Chamber), data = W.po.short, REML=F)
summary(m2)
anova(m2) # significant effect of Round and Plant species and Round x Plant sp
AIC(m2) # 1190.213
plot(simulationOutput <- simulateResiduals(fittedModel = m2, plot = F))
summary(m2)
anova(m2) # significant effect of Round and Plant species and Round x Plant sp
## Borage
# %N (proxy for pollen protein)
B.po <- W.pollen %>% filter(Plant_SP == "B")
# C:N ratio
m.B3 <- lmer(ratio ~ CO2 + Round + (1|Chamber), data = B.po, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel=m.B3, plot =F))
m.B4 <- lmer(ratio ~ CO2 * Round + (1|Chamber), data = B.po, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel=m.B4, plot =F))
summary(m.B3)
summary(m.B4)
anova(m.B4, m.B3) # no difference, but m.B2 has lower AIC
anova(m.B4) # Again, only Round is significant
# C
m.B1 <- lmer(C ~ CO2 + Round + (1|Chamber), data = B.po, REML=F)
# C
m.B1 <- lmer(C ~ CO2 + Round + (1|Chamber), data = B.po, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel = m.B1, plot = F))
summary(m.B1)
anova(m.B1) # only round is significant
AIC(m.B1) # 132.6573
## Buckwheat
# %N (proxy for pollen protein)
BW.po <- W.pollen %>% filter(Plant_SP == "BW")
m.BW1 <- lmer(N ~ CO2 + Round + (1|Chamber), data = BW.po, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel=m.BW1, plot =F))
m.BW2 <- lmer(N ~ CO2 * Round + (1|Chamber), data = BW.po, REML=F)
plot(simulationOutput <- simulateResiduals(fittedModel=m.BW2, plot =F))
summary(m.BW1)
anova(m.BW1)# significant effect of CO2, CO2 increases %N
anova(m.BW2)
anova(m.BW1, m.BW2) # virtually no difference between models
plot(simulationOutput <- simulateResiduals(fittedModel = m.B1, plot = F))
