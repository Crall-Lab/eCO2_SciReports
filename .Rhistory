ymaxN = mean(Total,na.rm=TRUE)+ (sd(Total,na.rm=TRUE)/sqrt(length(Total))))
Summary
Summary[Summary$N>15,]
dim(Summary[Summary$N>15,])
L<-subset(SpeciesOnly,SpeciesOnly$Floral.Resource..Genus.species.%in%Summary[Summary$N>15,"Floral.Resource..Genus.species."])
summary(L$Floral.Resource..Genus.species.)
summary(L$Floral.Resource..Genus.species.)
Q<-subset(df,df$Floral.Resource..Genus.species.%in%Summary[Summary$N>15,"Floral.Resource..Genus.species"])
Q<-subset(SpeciesOnly,SpeciesOnly$Floral.Resource..Genus.species.%in%Summary[Summary$N>15,"Floral.Resource..Genus.species."])
summary(Q$Floral.Resource..Genus.species.)
Q$Floral.Resource..Genus.species<-droplevels(Q$Floral.Resource..Genus.species)
dim(Q)
names(Q)
## Create matrix, all numbers, bees on the top (columns) plants in rows
PollNetwork<-Q[,8:16]
dim(PollNetwork)
head(PollNetwork)
row.names(PollNetwork)<-Q$Genus
row.names(PollNetwork)<-Q$Floral.Resource..Genus.species.
PollNetwork<-apply(Q[,8:16],2,function(y)tapply(y,Q$Floral.Resource..Genus.species.,function(x) sum(x,na.rm=TRUE))) ##2 means same this for each column
PollNetwork<-as.matrix(PollNetwork)
is.matrix(PollNetwork)
plotweb(PollNetwork)
pdf(file="Jul14PollNetworkBeeGPlantS.pdf",
width=16,
height=12)
par(mfrow=c(1,1)) #1,1=1column,1row
plotweb(PollNetwork,labsize=.5)
dev.off()
PollNetwork<-apply(M[,8:15],2,function(y)tapply(y,M$Floral.Resource..Genus.species.,function(x) sum(x,na.rm=TRUE)))
str(M)
dim(df)
str(df)
names(df)
##Data Validation:
## All counts columns numeric:
table(df$Floral.species,useNA = TRUE)
str(df[8:16])
summary(df$Green.sweat.bees)
df[df$Green.sweat.bees=="swarm","Green.sweat.bees"]<-NA
df$Green.sweat.bees<-as.numeric(as.character(df$Green.sweat.bees))
##Create New Columns: Genus and species
head(df$Floral.Resource..Genus.species.)
temp<-as.character(df$Floral.Resource..Genus.species.)
strsplit(temp," ")
df$Genus<-sapply(strsplit(temp," "), "[[", 1)
##remove rows with no species info
grep("[sp]\\.", df$Floral.Resource..Genus.species.,value=TRUE)
TF<-grepl("[sp]\\.", df$Floral.Resource..Genus.species.) ; table(TF)
SpeciesOnly<-subset(df,TF==FALSE)
dim(SpeciesOnly)
SpeciesOnly[SpeciesOnly$Floral.Resource..Genus.species.=="Asclepias Incarnata","Floral.Resource..Genus.species."]<-"Asclepias incarnita"
SpeciesOnly$Floral.Resource..Genus.species.<-droplevels(SpeciesOnly$Floral.Resource..Genus.species.)
table(SpeciesOnly$Floral.Resource..Genus.species.)
##remove grand total
##   df<-df[!df$Floral.species %in% c("Grand Total"),]
##  df<-df[is.na(df$Floral.species),]
#################################################################################
#################################################################################
## select columns
################################################################################
##                                                                            ##
## STEP 1: DESCRIPTIVES                                                       ##
##                                                                            ##
################################################################################
str(df[7:16])
str(df[7:15])
Summary<-ddply(SpeciesOnly,.(Floral.Resource..Genus.species.), summarise,
N = length(Total),
mean = mean(Total,na.rm=TRUE),
sd = sd(Total,na.rm=TRUE),
se = sd(Total,na.rm=TRUE)/sqrt(length(Total)),
yminN = mean(Total,na.rm=TRUE)- (sd(Total,na.rm=TRUE)/sqrt(length(Total))),
ymaxN = mean(Total,na.rm=TRUE)+ (sd(Total,na.rm=TRUE)/sqrt(length(Total))))
Summary
Summary[Summary$N>15,]
dim(Summary[Summary$N>15,])
##creating a subset
##
Q<-subset(SpeciesOnly,SpeciesOnly$Floral.Resource..Genus.species.%in%Summary[Summary$N>15,"Floral.Resource..Genus.species."])
summary(Q$Floral.Resource..Genus.species.)
Q$Floral.Resource..Genus.species<-droplevels(Q$Floral.Resource..Genus.species)
PollNetwork<-Q[,8:15]
dim(PollNetwork)
head(PollNetwork)
## No row names, need function to add in row names, do not want the row
## names as part of the matrix
row.names(PollNetwork)<-Q$Floral.Resource..Genus.species.
str(Q)
PollNetwork<-apply(Q[,8:16],2,function(y)tapply(y,Q$Floral.Resource..Genus.species.,function(x) sum(x,na.rm=TRUE))) ##2 means same this for each column
PollNetwork<-apply(Q[,8:15],2,function(y)tapply(y,Q$Floral.Resource..Genus.species.,function(x) sum(x,na.rm=TRUE))) ##2 means same this for each column
PollNetwork<-as.matrix(PollNetwork)
is.matrix(PollNetwork)
# ddply(Q,Genus,summarise)
plotweb(PollNetwork)
pdf(file="Jul14PollNetworkBeeGPlantS.pdf",
width=16,
height=12)
par(mfrow=c(1,1)) #1,1=1column,1row
plotweb(PollNetwork,labsize=.5)
dev.off()
source('~/.active-rstudio-document')
helloworld<-c(1,2,3) ## assigning object name
avghelloworld<-mean(helloworld)
getwd()
setwd(/Users/OliviaBernauer)
setwd(Users/OliviaBernauer)
getwd()
setwd(C:/Users/OliviaBernauer)
setwd(/Users/OliviaBernauer)
setwd(Users/OliviaBernauer)
getwd()
setwd("Users/OliviaBernauer")
source('~/Documents/Research/R/Starting Script OB_2019.R')
source('~/Documents/Research/R/Starting Script OB_2019.R')
citation()
citation(MASS)
citation("MASS")
###########
## bees vs. everything else
bees <- LP %>% filter(Specimen.type == "Loose Pollen")
library("ggpubr")
library("dplyr")
library("ggplot2")
library("car")
library("FSA")
library("agricolae")
library("multcomp")
library("DescTools")
library("lsmeans")
library("multcompView")
library("Rmisc")
library("pwr")
library("onewaytests")
library("pscl")
library("MASS")
library("boot")
library("tidyverse")
library("rstatix")
library("broom")
library("datarium")
library("reshape")
library("rcompanion")
library("foreign")
library("MASS")
library("reshape2")
library("stargazer")
library("summarytools")
## read in all of the data frames you need
SV<-read.csv(file="2018-Single-Visits-11-10-2020.csv",header=T, na.strings = c("","NULL"))
ss<-read.csv(file="2018-SingleVisit-SeedSet-11-10-2020.csv", header = T, na.strings = c("","NULL"))
P<-read.csv(file="2019-PollenDeposition-2020-11-27.csv", header = T, na.strings = c("","NULL"))
p<-read.csv(file="2019-PD.csv", header = T, na.strings=c("","NULL"))
LF<-read.csv(file="2018-Collected-Specimens-OMB-12-08-2020.csv", na.strings=c("","NULL"))
L <- read.csv(file="2020-12-08-LoosePollen.csv", na.strings=c("","NULL"))
mshort<-read.csv(file="shortened-model.csv", na.strings=c("","NULL"))
pd<- read.csv(file="PD.csv", header = T, na.strings = c("","NULL"))
a <- read.csv(file = "averages-by-year-region.csv", header=T, na.strings = c("","NULL"))
prop <- read.csv(file = "PL_prop_pollen.csv", header = T, na.string = c("","NULL"))
f<- read.csv(file = "pollensummarypresentabsent.csv", header = T, na.string = c("","NULL"))
C <- read.csv(file = "LD.csv", header = T, na.string = c("","NULL"))
## Clean up SV
SV$l.FS <- log(SV$Fruit.set+1)
SV$sr.FS <- sqrt(SV$Fruit.set)
## remove data from young
SV <- SV[SV$Region != "Young",]
B <- SV %>% filter (Region == "Bilpin")
## Make early and peak data frames
SV.early<-SV[SV$Bloom.status..Early.Peak. == "Early",]
SV.peak<-SV[SV$Bloom.status..Early.Peak. == "Peak",]
##########
## SV Early
######
SV.early.B<-SV.early[SV.early$Region == "Bilpin",]
## remove single visits from multiple visitors or no visitors
SV.early.B<-SV.early.B[SV.early.B$Visitor != "multiple",]
## Test for normality in fruit set column before comparing within treatments
ggdensity(SV.early.B$Fruit.set,
main="Density plot of Fruit set",
xlab="Fruit set")
ggqqplot(SV.early.B$Fruit.set)
## Shapiro wilk test for normality
shapiro.test(SV.early.B$Fruit.set)
## variance
leveneTest(Fruit.set ~ Treatment, SV.early.B, center=mean)
## filter out things with fewer than 5 observations like we did with everything else
LP <- LF %>% filter (Specimen.type == "Loose Pollen")
LP <- LP %>% filter (Region != "Young")
LP <- LP %>% filter (Host.plant == "Pink Lady")
citation("FD")
citation(lme4)
citation("lme4")
citation()
library(devtools)
install_github('andreacirilloac/updateR')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## This is a title!
Text outside of cells is for commenting and describing
Hashtags can be used for basic formatting, e.g.,
```{r load libraries}
library(lubridate)
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/logger.csv'
temp_data <- read.csv(filename)
colnames(temp_data) <- c('time', 'pressure', 'temp', 'humidity')
head(temp_data)
start.date <- parse_date_time('2022-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
?difftime
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
plot(temp~datenum, data = temp_data, pch = 19, col = "blue", xlab = "Time (days since Jan 1 2022)", ylab = "Temperature (C)")
start.date <- parse_date_time('2023-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
plot(temp~datenum, data = temp_data, pch = 19, col = "blue", xlab = "Time (days since Jan 1 2022)", ylab = "Temperature (C)")
# Generate overall boxplots
boxplot(temp_data$temp)
boxplot(temp_data$pressure)
boxplot(temp_data$humidity)
boxplot(temp_data$pressure)
boxplot(temp_data$humidity)
temp_data$early <- temp_data$datenum < 315
start.date <- parse_date_time('2022-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$early <- temp_data$datenum < 315
start.date <- parse_date_time('2023-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
temp_data$early <- temp_data$datenum < 28
boxplot(temp~early, data = temp_data)
#Plot two variables against each other
plot(humidity~temp, data = temp_data)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/logger.csv'
# Creates a variables 'filename' with the full path of your .csv file from the data logger
#
# NB This filename will be specific to your computer and will need to be modified.
# On mac, a shortcut to finding full pathnames is to control click (or right click),
# and then press 'option', and click 'Copy 'your file' as Pathname'
#
# On Windows, you can do the same by pressing the Shift Key and right-clicking, then 'Copy as Path'
temp_data <- read.csv(filename)
#Reads csv from file directly into a data frame
colnames(temp_data) <- c('time', 'pressure', 'temp', 'humidity')
# Manually add column names
head(temp_data)
#Very useful function that shows you the first 6 lines of a data frame, with variable names, etc. Especially useful for making sure things
start.date <- parse_date_time('2023-01-01 00:00:00', "%Y-%m-%d %H:%M:%S")
#Create a reference time point to calculate differences relative to. In this case, our reference time point will be Jan 1, 2022.
temp_data$datenum <- as.numeric(difftime(parse_date_time(temp_data$time, 'ymd-HMS'),start.date))
#This function is actually three steps combined:
#1: the inner function (parse_date_time function from the lubridate package) takes the timestamp from the logger
#2: difftime - whatever this does - calculates time differences
#3: tells R this is a numeric column
plot(temp~datenum, data = temp_data, pch = 19, col = "blue", xlab = "Time (days since Jan 1 2022)", ylab = "Temperature (C)")
# Things to look for in this kind of plot:
# Are the data on approximately the right scale? I.e., if you're measuring temperature in celsius and the data here maximum values in the 1000s, it's time to investigate!
#Stretch exercise: add lines here to make a similar plot for pressure and humidity
# Generate overall boxplots
boxplot(temp_data$temp)
#Generates a boxplot for a single variables
boxplot(temp_data$pressure)
boxplot(temp_data$humidity)
temp_data$early <- temp_data$datenum < 28
# Create a logical (True/False) variable in the data frame for whether or not the time is before a specific date
boxplot(temp~early, data = temp_data)
#This is an alternative way of specifying plotting; 'y~x' denotes plotting y as a function of x. For box plots, if the x variable is categorical or logical (as here), it will generate separate boxplots for each value of the x variable. The formula based plotting can be used with data frames, which have to be specified (here using the 'data=temp_data' input)
#Plot two variables against each other
plot(humidity~temp, data = temp_data)
install.package("lubridate")
install.packages("lubridate")
library("lubridate")
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/lightlogger1.csv'
light_data <- read.csv(filename)
colnames(light_data) <- c('time', 'light_ir', 'ir')
head(light_data)
start.date <- parse_date_time('2023-02-01 00:00:00', "%Y-%m-%d %H:%M:%S")
light_data$datenum <- as.numeric(difftime(parse_date_time(light_data$time, 'ymd-HMS'),start.date))
plot(light_ir~datenum, data = light_data, pch = 19, col = "purple", xlab = "Time (days since Feb 1 2023)", ylab = "Light and IR Intensity")
plot(ir~datenum, data = light_data, pch = 19, col = "green", xlab = "Time (days since Feb 1 2023)", ylab = "IR Intensity")
# remove IR from light+ir column
light_data$light<- light_data$light_ir - light_data$ir
plot(light~datenum, data = light_data, pch = 19, col = "magenta", xlab = "Time (days since Feb 1 2023)", ylab = "Light Intensity")
# remove IR from light+ir column
light_data$light<- light_data$ir - light_data$light_ir
plot(light~datenum, data = light_data, pch = 19, col = "magenta", xlab = "Time (days since Feb 1 2023)", ylab = "Light Intensity")
# Generate overall boxplots
boxplot(light_data$light_ir)
boxplot(light_data$ir)
boxplot(light_data$light)
temp_data$early <- temp_data$datenum < 7
light_data$early <- temp_data$datenum < 7
light_data$early <- light_data$datenum < 7
boxplot(ir~early, data = light_data)
#Plot light and IR against each other
plot(light~ir, data = light_data)
boxplot(light_ir~high, data = light_data)
light_data$high <- light_data$light_ir <700
boxplot(light_ir~high, data = light_data)
source("~/.active-rstudio-document", echo=TRUE)
View(light_data)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
light_data <- read.csv(filename)
colnames(light_data) <- c('time', 'light_ir', 'ir')
filename <- '/Users/OliviaBernauer/Documents/Research/2022-UW/2023-DigitalEcology/lightlogger1.csv'
light_data <- read.csv(filename)
colnames(light_data) <- c('time', 'light_ir', 'ir')
head(light_data)
start.date <- parse_date_time('2023-02-01 00:00:00', "%Y-%m-%d %H:%M:%S")
light_data$datenum <- as.numeric(difftime(parse_date_time(light_data$time, 'ymd-HMS'),start.date))
View(light_data)
plot(light_ir~datenum, data = light_data, pch = 19, col = "green", xlab = "Time (days since Feb 1 2023)", ylab = "Light Intensity")
plot(ir~datenum, data = light_data, pch = 19, col = "darkred", xlab = "Time (days since Feb 1 2023)", ylab = "IR Intensity")
# Generate overall boxplots
boxplot(light_data$ir)
boxplot(light_data$light_ir)
boxplot(light_data$light_ir)
light_data$early <- light_data$datenum < 7
View(light_data)
boxplot(light_ir~early, data = light_data)
# Generate overall boxplots
boxplot(light_data$ir)
#Generates a boxplot for a single variables
boxplot(light_data$light_ir)
light_data$early <- light_data$datenum < 7
# Create a logical (True/False) variable in the data frame for whether or not the time is before a specific date
boxplot(light_ir~early, data = light_data)
#This is an alternative way of specifying plotting; 'y~x' denotes plotting y as a function of x. For box plots, if the x variable is categorical or logical (as here), it will generate separate boxplots for each value of the x variable. The formula based plotting can be used with data frames, which have to be specified (here using the 'data=temp_data' input)
#Plot two variables against each other
plot(light_ir~ir, data = light_data)
setwd("/Users/OliviaBernauer/Documents/Research/oliviabernauer/eCO2_SciReports")
library(ggplot2)
library(tidyverse)
#Load and clean data
data <- read.csv('Pollen_metabolomics_exp1.csv')
data[data == "N/F"] <- NaN
data.1 <- data %>% filter(Round == "1")
data.2 <- data %>% filter(Round == "2")
## Round 1
# remove Squash data, sample sizes too small
data.1 <- data.1 %>% filter(species != "squash")
# also remove tomato for small sample sizes
data.1 <- data.1 %>% filter(species != "tomato")
#Separate out amino acids
cls <- c(6, 12, 13, 15, 16, 19, 21, 22, 23)
#Convert columns to numeric
for(i in 1:length(cls)){
data.1[,cls[i]] <- as.numeric(data.1[,cls[i]])
}
#Run principal components analysis
pc.data.1 <- data.1[,cls]
ind <- complete.cases(pc.data.1)
pc.data.1 <- pc.data.1[ind,]
pca.1 <- prcomp(pc.data.1, scale= TRUE)
summary(pca.1)
#Write PCs back to original data frame
data.1$PC1[ind] <- pca.1$x[,1]
data.1$PC2[ind] <- pca.1$x[,2]
#Generate figure and write to current working directory
data$CO2.treatment <- as.factor(data$CO2.treatment)
data$species <- as.factor(data$species)
ggplot(data.1, aes(x = PC1, y = PC2, colour = CO2.treatment, shape = species))+
geom_point()+
stat_ellipse()+
theme_classic()+
scale_color_manual(values = c("#becbca","#69a1ff"),
labels = c("aCO2", "eCO2"),
name = "Treatment")+
scale_shape_manual(values = c(15,16,17, 18, 0),
labels = c("Buckwheat",
"Poppy", "Sunflower"),
name = "Plant species")+
labs(y = "PC2 (20.5%)", x = "PC1 (53.8%)")
pdf(file="round1.pdf", width = 4.75,
height = 4)
pdf(file="round1.pdf",
width = 4.75,
height = 4)
ggplot(data.1, aes(x = PC1, y = PC2, colour = CO2.treatment, shape = species))+
geom_point()+
stat_ellipse()+
theme_classic()+
scale_color_manual(values = c("#becbca","#69a1ff"),
labels = c("aCO2", "eCO2"),
name = "Treatment")+
scale_shape_manual(values = c(15,16,17, 18, 0),
labels = c("Buckwheat",
"Poppy", "Sunflower"),
name = "Plant species")+
labs(y = "PC2 (20.5%)", x = "PC1 (53.8%)")
dev.off()
dev.off()
#Test whether CO2 and/or plant species were significant predictors of secondary metabolomics
model <- manova(cbind(PC1, PC2)~CO2.treatment*species, data = data.1)
summary(model)
## Round 2
#Get list of columns with reasonable data representation across species
cls <- c(6, 12, 13, 14, 15, 16, 19, 21, 22, 23)
#Convert columns to numeric
for(i in 1:length(cls)){
data.2[,cls[i]] <- as.numeric(data.2[,cls[i]])
}
#Run principal components analysis
pc.data.2 <- data.2[,cls]
## Round 2
#Get list of columns with reasonable data representation across species
cls <- c(6, 12, 13, 15, 16, 19, 21, 22, 23)
#Convert columns to numeric
for(i in 1:length(cls)){
data.2[,cls[i]] <- as.numeric(data.2[,cls[i]])
}
#Run principal components analysis
pc.data.2 <- data.2[,cls]
ind <- complete.cases(pc.data.2)
pc.data.2 <- pc.data.2[ind,]
pca.2 <- prcomp(pc.data.2, scale= TRUE)
summary(pca.2)
#Write PCs back to original data frame
data.2$PC1[ind] <- pca.2$x[,1]
data.2$PC2[ind] <- pca.2$x[,2]
#Generate figure and write to current working directory
data.2$CO2.treatment <- as.factor(data.2$CO2.treatment)
data.2$species <- as.factor(data.2$species)
pdf(file="round2.pdf",
width = 4.75,
height = 4)
ggplot(data.2, aes(x = PC1, y = PC2, colour = CO2.treatment, shape = species))+
geom_point()+
stat_ellipse()+
theme_classic()+
scale_color_manual(values = c("#becbca","#69a1ff"),
labels = c("aCO2", "eCO2"),
name = "Treatment")+
scale_shape_manual(values = c(15,1,17),
labels = c("Buckwheat",
"Squash", "Sunflower"),
name = "Plant species")+
labs(y = "PC2 (29.4%)", x = "PC1 (58.5%)")
dev.off()
#Test whether CO2 and/or plant species were significant predictors of secondary metabolomics
model <- manova(cbind(PC1, PC2)~CO2.treatment*species, data = data.2)
summary(model)
#Test whether CO2 and/or plant species were significant predictors of secondary metabolomics
model <- manova(cbind(PC1, PC2)~CO2.treatment*species, data = data.1)
summary(model)
# Compare each remaining compound individually
# caffeine
caf <- data.1 %>% filter(!is.na(Caffeine))
View(caf)
m.caf <-manova(Caffeine~CO2.treatment*species, data = data.1)
m.caf <-manova(Caffeine~CO2.treatment*species, data = caf.1)
# Compare each remaining compound individually
# caffeine
caf.1 <- data.1 %>% filter(!is.na(Caffeine))
m.caf <-manova(Caffeine~CO2.treatment*species, data = caf.1)
m.caf <-anova(Caffeine~CO2.treatment*species, data = caf.1)
library(lme4)
library(lmerTest)
# Compare each remaining compound individually
# caffeine
caf <- data %>% filter(!is.na(Caffeine))
View(caf)
# Compare each remaining compound individually
# caffeine
caf <- data %>% filter(Caffeine != "NaN")
View(caf)
m.caf <- lm(Caffeine~CO2.treatment*species, data = caf.1)
summary(m.caf)
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf.1)
summary(m.caf)
View(caf)
View(caf)
str(caf)
# Compare each remaining compound individually
data$Round <- as.factor(data$Round)
# caffeine
caf <- data %>% filter(Caffeine != "NaN")
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf.1)
summary(m.caf)
anova(m.caf)
m.caf <- lmer(Caffeine~CO2.treatment*species + Round, data = caf.1)
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf)
anova(m.caf)
# caffeine
caf <- data %>% filter(Caffeine != "NaN")
caf <- caf %>% group_by(species, Round, CO2.treatment) %>% filter(n()>2) %>% ungroup()
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf)
anova(m.caf) # only round significant
# analyze data
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf)
plot(simulationOutput <- simulateResiduals(fittedModel = m.caf, plot = F))
library(DHARMa)
plot(simulationOutput <- simulateResiduals(fittedModel = m.caf, plot = F))
# Compare each remaining compound individually
data$Round <- as.factor(data$Round)
# caffeine
# filter out caffeine samples, and then only keep samples with 3+ per plant, co2 treatment, and round
caf <- data %>% filter(Caffeine != "NaN")
caf <- caf %>% group_by(species, Round, CO2.treatment) %>% filter(n()>2) %>% ungroup()
# analyze data
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf)
plot(simulationOutput <- simulateResiduals(fittedModel = m.caf, plot = F))
hist(caf$Caffeine)
# analyze data
shapiro.test(caf$Caffeine)
str(caf)
caf$Caffeine <- as.numeric(caf$Caffeine)
# analyze data
shapiro.test(caf$Caffeine)
m.caf <- lm(Caffeine~CO2.treatment*species + Round, data = caf)
plot(simulationOutput <- simulateResiduals(fittedModel = m.caf, plot = F))
